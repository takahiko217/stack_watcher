# Stack Watcher - 株価比較ツール 仕様書

## 1. プロジェクト概要

### 1.1 目的
主要な株価の推移を比較して動向を調査するWebアプリケーションの開発

### 1.2 対象ユーザー
- 株式投資に関心のある個人投資家
- 金融データ分析者
- 市場動向調査担当者

## 2. 機能要件

### 2.1 データ表示機能

#### 2.1.1 株価表示
- **対象銘柄**：
  - クボタ（6326）
  - ソフトバンク（9984）
  - サカタのタネ（1377）
- **表示項目**：始値、高値、安値、終値、出来高

#### 2.1.2 国内インデックス表示
- **対象指数**：
  - 日経225
  - TOPIX
  - マザーズ指数
- **表示項目**：指数値、前日比、騰落率

#### 2.1.3 気象データ表示
- **表示項目**：
  - 降水量（mm）
  - 気温（℃）
  - 気圧（hPa）
- **データ取得地域**：東京都

### 2.2 グラフ表示機能

#### 2.2.1 レイアウト
- 各データ（株価、インデックス、気象データ）のグラフを縦方向に配置
- 横軸は全て統一された日付軸

#### 2.2.2 インタラクション
- **スライド操作**：横軸でのスライド操作が可能
- **同期機能**：全グラフの横軸が同期して動作
- **ズーム機能**：グラフの拡大縮小が可能

#### 2.2.3 時間軸制御
- **表示期間選択**：
  - 7日間
  - 1ヶ月（30日）
  - 四半期（3ヶ月）
- **リアルタイム更新**：市場開場時間中は自動更新

## 3. 技術仕様

### 3.1 フロントエンド

#### 3.1.1 フレームワーク・ライブラリ
- **Vue.js 3**: メインフレームワーク
- **ECharts**: グラフ描画ライブラリ
- **Tailwind CSS**: UIデザインフレームワーク

#### 3.1.2 コンポーネント構成
```
App.vue
├── Header.vue
├── Sidebar.vue
├── MainContent.vue
│   ├── StockChart.vue
│   ├── IndexChart.vue
│   └── WeatherChart.vue
└── Footer.vue
```

### 3.2 バックエンド

#### 3.2.1 API仕様
- **フレームワーク**: FastAPI (Python)
- **データベース**: PostgreSQL
- **認証**: JWT

#### 3.2.2 エンドポイント
```
GET /api/stocks/{symbol}?period={7d|1m|3m}
GET /api/indices?period={7d|1m|3m}
GET /api/weather?period={7d|1m|3m}
GET /api/colors/master
```

### 3.3 データソース
- **株価データ**: Yahoo Finance API
- **気象データ**: 気象庁API
- **更新頻度**: 15分間隔（市場開場時）

## 4. UI/UX仕様

### 4.1 レイアウト構成

#### 4.1.1 ヘッダー
- **高さ**: 64px
- **内容**: ロゴ、ナビゲーション、時間軸選択ボタン
- **位置**: 固定（sticky）

#### 4.1.2 サイドバー
- **幅**: 280px（展開時）、60px（折りたたみ時）
- **表示条件**: マウスオーバー時に展開
- **内容**: 銘柄選択、設定オプション、フィルター機能

#### 4.1.3 メインコンテンツ
- **レイアウト**: 縦スクロール対応
- **グラフ配置**: 株価→インデックス→気象データの順

#### 4.1.4 フッター
- **高さ**: 48px
- **内容**: コピーライト、利用規約、プライバシーポリシー

### 4.2 カラーパレット（マスタ管理）

#### 4.2.1 メインカラー
```css
--primary-blue: #1e40af
--primary-green: #059669
--primary-red: #dc2626
--accent-orange: #ea580c
```

#### 4.2.2 グラフカラー
```css
--kubota-color: #2563eb     /* 青 */
--softbank-color: #dc2626   /* 赤 */
--sakata-color: #059669     /* 緑 */
--nikkei-color: #7c3aed     /* 紫 */
--topix-color: #ea580c      /* オレンジ */
```

#### 4.2.3 システムカラー
```css
--background: #f8fafc
--surface: #ffffff
--text-primary: #1f2937
--text-secondary: #6b7280
--border: #e5e7eb
```

### 4.3 レスポンシブ対応

#### 4.3.1 ブレークポイント
- **Desktop**: 1024px以上
- **Tablet**: 768px - 1023px
- **Mobile**: 767px以下

#### 4.3.2 モバイル対応
- サイドバーは下部タブ形式に変更
- グラフは単体表示でスワイプ切り替え
- ヘッダーにハンバーガーメニュー追加

## 5. パフォーマンス要件

### 5.1 読み込み時間
- **初回読み込み**: 3秒以内
- **データ更新**: 1秒以内
- **グラフ描画**: 500ms以内

### 5.2 データ容量
- **1日分データ**: 50KB以内
- **1ヶ月分データ**: 1MB以内
- **キャッシュ期間**: 15分

## 6. セキュリティ要件

### 6.1 データ保護
- HTTPS通信の強制
- APIキーの環境変数管理
- レート制限の実装

### 6.2 ユーザー認証
- セッション管理
- CORS設定
- XSS対策

## 7. 開発環境

### 7.1 必要な技術スタック
```json
{
  "frontend": {
    "vue": "^3.3.0",
    "echarts": "^5.4.0",
    "tailwindcss": "^3.3.0",
    "vite": "^4.4.0"
  },
  "backend": {
    "fastapi": "^0.103.0",
    "uvicorn": "^0.23.0",
    "psycopg2": "^2.9.0",
    "pandas": "^2.0.0"
  }
}
```

### 7.2 開発・デプロイ環境
- **開発**: Docker Compose
- **ステージング**: Google Cloud Run
- **本番**: Google Cloud Run + Cloud SQL

## 8. テスト仕様

### 8.1 ユニットテスト
- Vue Component Test Utils
- pytest (Python)
- カバレッジ: 80%以上

### 8.2 E2Eテスト
- Playwright
- 主要ユーザーフローの自動化

### 8.3 パフォーマンステスト
- Lighthouse CI
- Core Web Vitals準拠

## 9. リリース計画

### 9.1 Phase 1 (MVP)
- [x] 基本的なグラフ表示機能
- [x] 3銘柄の株価表示
- [x] 7日間の時間軸

### 9.2 Phase 2
- [ ] インデックス表示機能
- [ ] 気象データ表示機能
- [ ] 1ヶ月・四半期表示

### 9.3 Phase 3
- [ ] 高度なインタラクション機能
- [ ] レスポンシブ対応
- [ ] パフォーマンス最適化

## 10. 保守・運用

### 10.1 監視項目
- アプリケーション稼働率
- API応答時間
- エラー発生率
- データ更新頻度

### 10.2 バックアップ
- データベース: 日次バックアップ
- 設定ファイル: Git管理
- ログ: 30日間保存

---

**作成日**: 2025年9月20日  
**バージョン**: 1.0  
**作成者**: Development Team