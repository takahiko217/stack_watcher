# Stack Watcher - 株価比較ツール 仕様書

## 1. プロジェクト概要

### 1.1 目的
主要な株価の推移を比較して動向を調査するWebアプリケーションの開発

### 1.2 対象ユーザー
- 株式投資に関心のある個人投資家
- 金融データ分析者
- 市場動向調査担当者

## 2. 機能要件

### 2.1 データ表示機能

#### 2.1.1 株価表示
- **対象銘柄**：
  - クボタ（6326）
  - ソフトバンク（9984）
  - サカタのタネ（1377）
- **表示項目**：始値、高値、安値、終値、出来高

#### 2.1.2 国内インデックス表示
- **対象指数**：
  - 日経225
  - TOPIX
  - マザーズ指数
- **表示項目**：指数値、前日比、騰落率

#### 2.1.3 気象データ表示
- **表示項目**：
  - 降水量（mm）
  - 気温（℃）
  - 気圧（hPa）
- **データ取得地域**：東京都

### 2.2 グラフ表示機能

#### 2.2.1 レイアウト
- 各データ（株価、インデックス、気象データ）のグラフを縦方向に配置
- 横軸は全て統一された日付軸

#### 2.2.2 インタラクション
- **スライド操作**：横軸でのスライド操作が可能
- **同期機能**：全グラフの横軸が同期して動作
- **ズーム機能**：グラフの拡大縮小が可能

#### 2.2.3 時間軸制御
- **表示期間選択**：
  - 7日間
  - 1ヶ月（30日）
  - 四半期（3ヶ月）
- **リアルタイム更新**：市場開場時間中は自動更新

## 3. 技術仕様

### 3.1 フロントエンド

#### 3.1.1 フレームワーク・ライブラリ
- **Vue.js 3**: メインフレームワーク
- **ECharts**: グラフ描画ライブラリ
- **Tailwind CSS**: UIデザインフレームワーク

#### 3.1.2 コンポーネント構成（Phase 2拡張）
```
App.vue
├── components/layout/
│   ├── AppHeader.vue          # 期間選択タブ追加
│   ├── AppSidebar.vue         # データ表示切り替え
│   ├── MainDashboard.vue      # 3段レイアウト管理
│   └── AppFooter.vue
├── components/charts/
│   ├── BaseChart.vue          # チャート基盤
│   ├── StockChart.vue         # 株価専用チャート
│   ├── IndexChart.vue         # インデックス専用チャート
│   ├── WeatherChart.vue       # 気象データ専用チャート
│   ├── ChartContainer.vue     # 同期機能付きコンテナ
│   └── PeriodSelector.vue     # 期間選択UI
├── components/common/
│   ├── BaseButton.vue
│   ├── BaseLoading.vue
│   └── BaseModal.vue
├── stores/
│   ├── stockStore.js          # 株価データ管理
│   ├── indexStore.js          # インデックスデータ管理
│   ├── weatherStore.js        # 気象データ管理
│   ├── syncStore.js           # グラフ同期状態管理
│   └── uiStore.js             # UI状態管理
└── services/
    ├── stockService.js        # 株価API
    ├── indexService.js        # インデックスAPI
    ├── weatherService.js      # 気象データAPI
    └── apiClient.js           # 統合APIクライアント
```

### 3.2 バックエンド

#### 3.2.1 API仕様
- **フレームワーク**: FastAPI (Python)
- **データベース**: PostgreSQL
- **認証**: JWT

#### 3.2.2 エンドポイント
```
# 株価データ
GET /api/v1/stocks?symbols={symbol_list}&period={7d|1m|3m}
GET /api/v1/stocks/{symbol}?period={7d|1m|3m}

# インデックスデータ（Phase 2新規）
GET /api/v1/indices?period={7d|1m|3m}
GET /api/v1/indices/{index}?period={7d|1m|3m}

# 気象データ（Phase 2新規）
GET /api/v1/weather?period={7d|1m|3m}&location=tokyo

# システム
GET /api/v1/health
GET /api/v1/demo
```

#### 3.2.3 データモデル（Phase 2拡張）

**インデックスデータ構造**:
```json
{
  "success": true,
  "data": {
    "^N225": {
      "name": "日経225",
      "dates": ["2025-09-13", "2025-09-14", ...],
      "values": [28450.0, 28520.5, ...],
      "changes": [120.5, 70.5, ...],
      "change_percent": [0.42, 0.25, ...]
    }
  }
}
```

**気象データ構造**:
```json
{
  "success": true,
  "data": {
    "dates": ["2025-09-13", "2025-09-14", ...],
    "precipitation": [2.5, 0.0, 8.2, ...],
    "temperature": [24.5, 26.1, 23.8, ...],
    "pressure": [1013.2, 1015.8, 1012.1, ...]
  }
}
```

**統合レスポンス構造**:
```json
{
  "success": true,
  "data": {
    "stocks": [StockData],
    "indices": [IndexData],
    "weather": WeatherData,
    "period": "7d|1m|3m",
    "lastUpdated": "2025-09-20T10:00:00Z"
  }
}
```

#### 3.2.4 TypeScript型定義（Phase 2）
```typescript
interface StockData {
  symbol: string;
  name: string;
  dates: string[];
  prices: number[];
  volumes: number[];
}

interface IndexData {
  symbol: string;
  name: string;
  dates: string[];
  values: number[];
  changes: number[];
  changePercent: number[];
}

interface WeatherData {
  location: string;
  dates: string[];
  precipitation: number[];
  temperature: number[];
  pressure: number[];
}

interface DashboardData {
  stocks: StockData[];
  indices: IndexData[];
  weather: WeatherData;
  period: string;
  lastUpdated: string;
}
```

### 3.3 データソース（Phase 2拡張）

#### 3.3.1 株価・インデックスデータ
- **プロバイダー**: Yahoo Finance API (yfinance 0.2.66+)
- **対象銘柄**: 6326, 9984, 1377
- **対象インデックス**: 
  - ^N225（日経225）
  - ^TPX（TOPIX）
  - 2516.T（マザーズ指数）
- **更新頻度**: 15分間隔（市場開場時間中）
- **データ項目**: OHLCV（始値、高値、安値、終値、出来高）

#### 3.3.2 気象データ
- **プロバイダー**: OpenMeteo API
- **取得地点**: 東京都（緯度: 35.6762, 経度: 139.6503）
- **更新頻度**: 1日1回（深夜バッチ処理）
- **データ項目**:
  - 降水量（mm）: 日降水量の合計
  - 気温（℃）: 日平均気温
  - 気圧（hPa）: 日平均海面気圧
- **データ保持期間**: 過去1年分
- **API URL**: https://archive-api.open-meteo.com/v1/archive

#### 3.3.3 データキャッシュ戦略
- **株価・インデックス**: Redis 15分キャッシュ
- **気象データ**: ローカルDB永続化
- **エラー時**: 前回取得データをフォールバック

## 4. UI/UX仕様

### 4.1 レイアウト構成

#### 4.1.1 ヘッダー（Phase 2拡張）
- **高さ**: 64px
- **内容**: 
  - ロゴ（左端）
  - 期間選択タブ（中央）: 7日間 | 1ヶ月 | 四半期
  - 設定ボタン（右端）
- **位置**: 固定（sticky）
- **期間選択UI**: アクティブタブのハイライト表示

#### 4.1.2 サイドバー（Phase 2対応）
- **幅**: 280px（展開時）、60px（折りたたみ時）
- **表示条件**: マウスオーバー時に展開
- **内容**: 
  - データ表示切り替え（株価・インデックス・気象）
  - グラフ表示設定
  - データエクスポート機能（将来対応）

#### 4.1.3 メインコンテンツ（Phase 2レイアウト）
- **レイアウト**: 縦スクロール対応の3段構成
- **グラフ配置**: 
  1. **株価グラフセクション**（高さ: 400px）
     - 3銘柄の株価チャート
     - 凡例とツールチップ
  2. **インデックスグラフセクション**（高さ: 350px）
     - 日経225、TOPIX、マザーズ指数
     - 前日比表示機能
  3. **気象データグラフセクション**（高さ: 300px）
     - 降水量、気温、気圧の複合チャート
     - 左右Y軸の使い分け
- **同期機能**: 全グラフの横軸（時間軸）を同期
- **インタラクション**: スライド・ズーム操作の連動

#### 4.1.4 フッター
- **高さ**: 48px
- **内容**: コピーライト、データソース表記、利用規約

### 4.2 カラーパレット（マスタ管理）

#### 4.2.1 メインカラー
```css
--primary-blue: #1e40af
--primary-green: #059669
--primary-red: #dc2626
--accent-orange: #ea580c
```

#### 4.2.2 グラフカラー（Phase 2拡張）

**株価チャート**:
```css
--kubota-color: #2563eb     /* 青 */
--softbank-color: #dc2626   /* 赤 */
--sakata-color: #059669     /* 緑 */
```

**インデックスチャート**:
```css
--nikkei-color: #7c3aed     /* 紫 */
--topix-color: #ea580c      /* オレンジ */
--mothers-color: #f59e0b    /* アンバー */
```

**気象データチャート**:
```css
--precipitation-color: #0ea5e9  /* スカイブルー */
--temperature-color: #ef4444   /* レッド */
--pressure-color: #6b7280      /* グレー */
```

#### 4.2.3 システムカラー
```css
--background: #f8fafc
--surface: #ffffff
--text-primary: #1f2937
--text-secondary: #6b7280
--border: #e5e7eb
```

### 4.3 レスポンシブ対応

#### 4.3.1 ブレークポイント
- **Desktop**: 1024px以上
- **Tablet**: 768px - 1023px
- **Mobile**: 767px以下

#### 4.3.2 モバイル対応
- サイドバーは下部タブ形式に変更
- グラフは単体表示でスワイプ切り替え
- ヘッダーにハンバーガーメニュー追加

## 5. パフォーマンス要件

### 5.1 読み込み時間
- **初回読み込み**: 3秒以内
- **データ更新**: 1秒以内
- **グラフ描画**: 500ms以内

### 5.2 データ容量
- **1日分データ**: 50KB以内
- **1ヶ月分データ**: 1MB以内
- **キャッシュ期間**: 15分

## 6. セキュリティ要件

### 6.1 データ保護
- HTTPS通信の強制
- APIキーの環境変数管理
- レート制限の実装

### 6.2 ユーザー認証
- セッション管理
- CORS設定
- XSS対策

## 7. 開発環境

### 7.1 必要な技術スタック（Phase 2拡張）
```json
{
  "frontend": {
    "vue": "^3.3.0",
    "echarts": "^5.4.0",
    "tailwindcss": "^3.3.0",
    "vite": "^4.4.0",
    "pinia": "^2.1.0",
    "axios": "^1.5.0"
  },
  "backend": {
    "fastapi": "^0.115.5",
    "uvicorn": "^0.32.1",
    "yfinance": "^0.2.66",
    "pandas": "^2.3.2",
    "requests": "^2.31.0",
    "httpx": "^0.25.0",
    "redis": "^4.5.0"
  },
  "development": {
    "pytest": "^7.4.0",
    "black": "^23.7.0",
    "eslint": "^8.45.0",
    "prettier": "^3.0.0"
  }
}
```

### 7.2 開発・デプロイ環境
- **開発**: Docker Compose
- **ステージング**: Google Cloud Run
- **本番**: Google Cloud Run + Cloud SQL

## 8. テスト仕様（Phase 2拡張）

### 8.1 ユニットテスト
**フロントエンド**:
- Vue Component Test Utils
- Vitest（Vue 3推奨テストランナー）
- 対象コンポーネント: StockChart, IndexChart, WeatherChart, PeriodSelector
- カバレッジ: 80%以上

**バックエンド**:
- pytest (Python)
- 対象モジュール: stock_service, index_service, weather_service
- APIエンドポイントテスト
- カバレッジ: 85%以上

### 8.2 統合テスト（Phase 2新規）
**APIデータ統合**:
- 株価・インデックス・気象データの同時取得
- データ整合性チェック
- エラーハンドリング検証

**フロントエンド統合**:
- マルチチャート表示
- 同期機能テスト
- 期間変更時のデータ更新

### 8.3 E2Eテスト（Phase 2拡張）
**ユーザーシナリオ**:
- 期間選択による全グラフ更新
- グラフ同期操作（スライド・ズーム）
- エラー時のフォールバック表示
- レスポンシブデザイン確認

**テストツール**:
- Playwright
- クロスブラウザテスト
- モバイルデバイステスト

### 8.4 パフォーマンステスト（Phase 2強化）
**メトリクス**:
- 複数データ同時読み込み: 2秒以内
- グラフ同期処理: 300ms以内
- メモリ使用量: 100MB以下

**測定ツール**:
- Lighthouse CI
- Core Web Vitals準拠
- ECharts パフォーマンス監視

## 9. リリース計画

### 9.1 Phase 1 (MVP)
- [x] 基本的なグラフ表示機能
- [x] 3銘柄の株価表示
- [x] 7日間の時間軸

### 9.2 Phase 2 - データ拡張とUI強化

#### 9.2.1 インデックス表示機能
- **対象指数**：
  - 日経225 (^N225)
  - TOPIX (^TPX) 
  - マザーズ指数 (2516.T)
- **表示項目**：
  - 指数値（終値）
  - 前日比（変化量）
  - 騰落率（パーセント）
  - 出来高（該当する場合）
- **データソース**: Yahoo Finance API
- **更新頻度**: 株価データと同じ15分間隔

#### 9.2.2 気象データ表示機能
- **表示項目**：
  - 降水量（mm/日）
  - 平均気温（℃）
  - 気圧（hPa）
- **データ取得地域**: 東京都（OpenMeteo API）
- **データソース**: OpenMeteo Historical Weather API
- **更新頻度**: 1日1回（深夜更新）
- **データ期間**: 株価データと同期した期間

#### 9.2.3 期間選択機能拡張
- **追加期間オプション**：
  - 1ヶ月（30日）
  - 四半期（3ヶ月/90日）
- **既存期間の維持**: 7日間
- **UI配置**: ヘッダー部にタブ形式で配置
- **データ同期**: 全グラフで選択期間を統一

#### 9.2.4 レイアウト機能
- **縦配置レイアウト**：
  1. 株価グラフ（上部）
  2. インデックスグラフ（中部）
  3. 気象データグラフ（下部）
- **横軸同期**: 全グラフの時間軸を統一
- **スライド同期**: 一つのグラフをスライドすると全グラフが連動
- **ズーム同期**: 拡大縮小操作の全グラフ連動

#### 9.2.5 データ相関分析基盤
- **相関可視化準備**: 農業関連株（サカタのタネ）と気象データの関連性
- **データ蓄積**: 将来的な分析のためのデータ保存構造
- **パフォーマンス最適化**: 複数データソースの効率的な取得

#### 9.2.6 Phase 2 実装計画

**Phase 2.1: バックエンドAPI実装（2週間）**
1. インデックスデータAPI開発
   - Yahoo FinanceからN225, TOPIX, マザーズ取得
   - 前日比・騰落率計算ロジック
2. 気象データAPI開発
   - OpenMeteo API統合
   - データキャッシュ機能
3. エンドポイント統合テスト

**Phase 2.2: フロントエンド基盤実装（2週間）**
1. 新規Store実装（indexStore, weatherStore, syncStore）
2. 期間選択UI実装（PeriodSelector）
3. レイアウトコンポーネント拡張（MainDashboard）

**Phase 2.3: チャート機能実装（3週間）**
1. IndexChart コンポーネント実装
2. WeatherChart コンポーネント実装
3. 同期機能実装（横軸・スライド・ズーム）
4. チャート間データ連携

**Phase 2.4: 統合・最適化（1週間）**
1. 全機能の統合テスト
2. パフォーマンス最適化
3. UI/UXの調整
4. デプロイ準備

### 9.3 Phase 3
- [ ] 高度なインタラクション機能
- [ ] レスポンシブ対応
- [ ] パフォーマンス最適化

## 10. 保守・運用

### 10.1 監視項目
- アプリケーション稼働率
- API応答時間
- エラー発生率
- データ更新頻度

### 10.2 バックアップ
- データベース: 日次バックアップ
- 設定ファイル: Git管理
- ログ: 30日間保存

---

**作成日**: 2025年9月20日  
**バージョン**: 1.0  
**作成者**: Development Team